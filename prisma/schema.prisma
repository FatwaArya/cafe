// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum STATUS {
    PAID
    NOT_PAID
}

enum ROLE {
    CASHIER
    MANAGER
    ADMIN
}

enum MENU_TYPE {
    FOOD
    BEVERAGE
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id               String         @id @default(cuid())
    name             String?
    email            String?        @unique
    emailVerified    DateTime?
    image            String?
    role             ROLE           @default(CASHIER)
    whitelistEmail   WhitelistEmail @relation(fields: [whitelistEmailId], references: [id], onDelete: Cascade)
    whitelistEmailId String         @unique
    accounts         Account[]
    sessions         Session[]
    Transaction      Transaction[]

    @@index([whitelistEmailId])
}

model Table {
    id          String        @id @default(cuid())
    number      String
    Transaction Transaction[]
}

model Menu {
    id          String        @id @default(cuid())
    name        String
    price       String
    type        MENU_TYPE     @default(FOOD)
    desc        String?
    image       String?
    Transaction Transaction[]
}

model Transaction {
    id              String   @id @default(cuid())
    transactionDate DateTime
    status          STATUS   @default(NOT_PAID)
    table           Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId         String
    menu            Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
    menuId          String
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    cutomerName     String

    @@index([tableId])
    @@index([menuId])
    @@index([userId])
}

//make whitelist model for user
model WhitelistEmail {
    id    String @id @default(cuid())
    email String @unique
    User  User[]
}
