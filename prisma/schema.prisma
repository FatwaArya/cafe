// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role         Role      @default(KASIR)
    accounts      Account[]
    sessions      Session[]
    transaksi     Transaksi[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model Meja {
    id            String    @id @default(cuid())
    nomor_meja    String
    status        String
    transaksi     Transaksi[]
}
model Menu{
    id            String    @id @default(cuid())
    nama_menu     String
    jenis_menu    JenisMenu @default(MAKANAN)
    harga         String
    deskripsi     String
    gambar        String
    detail_transaksi detail_transaksi[]
}
enum JenisMenu{
    MAKANAN
    MINUMAN
}

model detail_transaksi {
    id            String    @id @default(cuid())
    id_transaksi  String
    transaksi     Transaksi @relation(fields: [id_transaksi], references: [id], onDelete: Cascade)
    id_menu       String
    total_harga   String
    menu         Menu      @relation(fields: [id_menu], references: [id], onDelete: Cascade)
    

    @@index([id_transaksi])
    @@index([id_menu])
}
model Transaksi{
    id            String    @id @default(cuid())
    id_meja       String
    tgl_transaksi DateTime
    id_user       String
    nama_pelanggan String
    detail_transaksi detail_transaksi[]
    status        Status @default(BELUM_BAYAR)
    user         User   @relation(fields: [id_user], references: [id], onDelete: Cascade)
    meja        Meja   @relation(fields: [id_meja], references: [id], onDelete: Cascade)

    @@index([id_user])
    @@index([id_meja])
}

enum Status{
    BELUM_BAYAR
    LUNAS
}

enum Role {
    KASIR
    MANAGER
    ADMIN
}